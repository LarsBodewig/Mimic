buildscript {
    group = "$groupId"
}

plugins {
    id 'eclipse'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

java {
    sourceCompatibility = JavaVersion.VERSION_19
    withJavadocJar()
    withSourcesJar()
}

gradlePlugin {
    plugins {
        mimic {
            id = 'dev.bodewig.mimic'
            displayName = 'Mimic Gradle Plugin'
            description = 'Create reflective accessors for third party classes'
            tags.set(['reflection', 'codegen', 'java', 'wrapper'])
            implementationClass = 'dev.bodewig.mimic.gradle.plugin.MimicPlugin'
            website = 'https://github.com/LarsBodewig/Mimic'
            vcsUrl = 'https://github.com/LarsBodewig/Mimic.git'
        }
    }
}

//project.gradle.taskGraph.whenReady { taskGraph ->
//    if (taskGraph.hasTask(':publish')) {
		signing {
			def gpgKey = System.getenv('gpgKey')
			def gpgPass = System.getenv('gpgPass')
			useInMemoryPgpKeys(gpgKey, gpgPass)
    		useGpgCmd()
		}
		/*tasks.withType(Sign) {
			doFirst {
				println 'doSigning'
			    def gpgKey = System.getenv('gpgKey')
			    def gpgPass = System.getenv('gpgPass')
			    useInMemoryPgpKeys(gpgKey, gpgPass)
				sign publishing.publications.mimicPluginMarkerMaven
				sign publishing.publications.pluginMaven
			}
	    }*/
//	}
//}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots'
            url = "$version".endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials)
        }
    }
    publications.withType(MavenPublication) { pub ->
	    pom.withXml {
	        def pom = asNode()
	        def parent = pom.appendNode('parent')
	        parent.appendNode('groupId', "$groupId")
	        parent.appendNode('artifactId', 'mimic-parent')
	        parent.appendNode('version', "$version")
	        pom.remove(pom.get('groupId'))
	        pom.remove(pom.get('version'))
	    }
	}
}

dependencies {
    implementation "dev.bodewig.mimic:mimic-core:$version"
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = [ "src/" ]

eclipse.project.name = "$name"
