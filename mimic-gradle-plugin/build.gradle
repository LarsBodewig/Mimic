buildscript {
    group = "$groupId"
}

plugins {
    id 'eclipse'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

java {
    sourceCompatibility = JavaVersion.VERSION_19
    withJavadocJar()
    withSourcesJar()
}

gradlePlugin {
    plugins {
        mimic {
            id = 'dev.bodewig.mimic'
            displayName = 'mimic-gradle-plugin'
            description = 'Create reflective accessors for third party classes'
            tags.set(['reflection', 'codegen', 'java', 'wrapper'])
            implementationClass = 'dev.bodewig.mimic.gradle.plugin.MimicPlugin'
            website = 'https://github.com/LarsBodewig/Mimic'
            vcsUrl = 'https://github.com/LarsBodewig/Mimic.git'
        }
    }
}

project.gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':publish')) {
		artifacts {
		    archives jar
		    archives sourcesJar
		    archives javadocJar
		}
		signing {
		    def gpgKey = System.getenv('gpgKey')
		    def gpgPass = System.getenv('gpgPass')
		    useInMemoryPgpKeys(gpgKey, gpgPass)
			sign configurations.archives
	    }
	}
}

//publishing.publications.named('mimicPluginMarkerMaven') { pub ->
publishing.publications.withType(MavenPublication) { pub ->
	println pub.pom
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots'
            url = "$version".endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials)
        }
    }
	/*publications {
        mimicPluginMarkerMaven(MavenPublication) {
            from components.java
            //artifact sourcesJar
            //artifact javadocJar
            pom {
                name = 'Mimic Gradle plugin'
                description = 'Gradle plugin to create type-safe accessors using reflection'
                artifactId = 'mimic-gradle-plugin2'
                pom.withXml {
                    def pom = asNode()
                    def parent = pom.appendNode('parent')
                    parent.appendNode('groupId', "$groupId")
                    parent.appendNode('artifactId', 'mimic-parent')
                    parent.appendNode('version', "$version")
                    pom.remove(pom.get('groupId'))
                    pom.remove(pom.get('version'))
                }
            }
        }
    }*/
}

dependencies {
    implementation "dev.bodewig.mimic:mimic-core:$version"
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = [ "src/" ]

eclipse.project.name = "$name"
